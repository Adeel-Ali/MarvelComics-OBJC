//
//  CharactersController.h
//  MarvelComics
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/25/2016
//
#import <Foundation/Foundation.h>
#import "Configuration.h"
#import "APIHelper.h"
#import "APIError.h"
#import "BaseController.h"
#import "UnirestClient.h"
#import "HttpContext.h"
#import "Character.h"
#import "ComicDataWrapper.h"
#import "FormatTypeEnum.h"
#import "FormatTypeEnumHelper.h"
#import "DateDescriptorEnum.h"
#import "DateDescriptorEnumHelper.h"
#import "EventDataWrapper.h"
#import "SeriesDataWrapper.h"
#import "StoryDataWrapper.h"
#import "CharacterDataWrapper.h"

@interface CharactersController : BaseController

/**
* Completion block definition for asynchronous call to getCharacterIndividual */
typedef void (^CompletedGetCharacterIndividual)(BOOL success, HttpContext* context, Character* response, NSError* error);

/**
* Fetches a single character by id.
* @param    characterId    Required parameter: A single character id.
*/
- (void) getCharacterIndividualAsyncWithCharacterId:(NSString*) characterId
                completionBlock:(CompletedGetCharacterIndividual) onCompleted;

/**
* Completion block definition for asynchronous call to getComicsCharacterCollection */
typedef void (^CompletedGetComicsCharacterCollection)(BOOL success, HttpContext* context, ComicDataWrapper* response, NSError* error);

/**
* Fetches lists of comics filtered by a character id.
* @param    characterId    Required parameter: A single character id.
* @param    collaborators    Optional parameter: Return only comics in which the specified creators worked together (for example in which BOTH Stan Lee and Jack Kirby did work).
* @param    creators    Optional parameter: Return only comics which feature work by the specified creators (accepts a comma-separated list of ids).
* @param    dateDescriptor    Optional parameter: Return comics within a predefined date range.
* @param    dateRange    Optional parameter: Return comics within a predefined date range.  Dates must be specified as date1,date2 (e.g. 2013-01-01,2013-01-02).  Dates are preferably formatted as YYYY-MM-DD but may be sent as any common date format.
* @param    diamondCode    Optional parameter: Filter by diamond code.
* @param    digitalId    Optional parameter: Filter by digital comic id.
* @param    ean    Optional parameter: Filter by EAN.
* @param    events    Optional parameter: Return only comics which take place in the specified events (accepts a comma-separated list of ids).
* @param    format    Optional parameter: Filter by the issue format (e.g. comic, digital comic, hardcover). (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")
* @param    formatType    Optional parameter: Filter by the issue format type (comic or collection).
* @param    hasDigitalIssue    Optional parameter: Include only results which are available digitally. (Acceptable values are: "true")
* @param    isbn    Optional parameter: Filter by ISBN.
* @param    issn    Optional parameter: Filter by ISSN.
* @param    issueNumber    Optional parameter: Return only issues in series whose issue number matches the input.
* @param    limit    Optional parameter: Limit the result set to the specified number of resources.
* @param    modifiedSince    Optional parameter: Return only comics which have been modified since the specified date.
* @param    noVariants    Optional parameter: Exclude variant comics from the result set. (Acceptable values are: "true")
* @param    offset    Optional parameter: Skip the specified number of resources in the result set.
* @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "focDate", "onsaleDate", "title", "issueNumber", "modified", "-focDate", "-onsaleDate", "-title", "-issueNumber", "-modified")
* @param    series    Optional parameter: Return only comics which are part of the specified series (accepts a comma-separated list of ids).
* @param    sharedAppearances    Optional parameter: Return only comics in which the specified characters appear together (for example in which BOTH Spider-Man and Wolverine appear).
* @param    startYear    Optional parameter: Return only issues in series whose start year matches the input.
* @param    stories    Optional parameter: Return only comics which contain the specified stories (accepts a comma-separated list of ids).
* @param    title    Optional parameter: Return only issues in series whose title matches the input.
* @param    titleStartsWith    Optional parameter: Return only issues in series whose title starts with the input.
* @param    upc    Optional parameter: Filter by UPC.
*/
- (void) getComicsCharacterCollectionAsyncWithCharacterId:(NSString*) characterId
                collaborators:(NSString*) collaborators
                creators:(NSString*) creators
                dateDescriptor:(enum DateDescriptorEnum) dateDescriptor
                dateRange:(NSString*) dateRange
                diamondCode:(NSString*) diamondCode
                digitalId:(NSString*) digitalId
                ean:(NSString*) ean
                events:(NSString*) events
                format:(NSString*) format
                formatType:(enum FormatTypeEnum) formatType
                hasDigitalIssue:(NSString*) hasDigitalIssue
                isbn:(NSString*) isbn
                issn:(NSString*) issn
                issueNumber:(NSString*) issueNumber
                limit:(NSString*) limit
                modifiedSince:(NSString*) modifiedSince
                noVariants:(NSString*) noVariants
                offset:(NSString*) offset
                orderBy:(NSString*) orderBy
                series:(NSString*) series
                sharedAppearances:(NSString*) sharedAppearances
                startYear:(NSString*) startYear
                stories:(NSString*) stories
                title:(NSString*) title
                titleStartsWith:(NSString*) titleStartsWith
                upc:(NSString*) upc
                completionBlock:(CompletedGetComicsCharacterCollection) onCompleted;

/**
* Completion block definition for asynchronous call to getCharacterEventsCollection */
typedef void (^CompletedGetCharacterEventsCollection)(BOOL success, HttpContext* context, EventDataWrapper* response, NSError* error);

/**
* Fetches lists of events filtered by a character id.
* @param    characterId    Required parameter: A single character id.
* @param    comics    Optional parameter: Return only events which take place in the specified comics (accepts a comma-separated list of ids).
* @param    creators    Optional parameter: Return only events which feature work by the specified creators (accepts a comma-separated list of ids).
* @param    limit    Optional parameter: Limit the result set to the specified number of resources.
* @param    modifiedSince    Optional parameter: Return only events which have been modified since the specified date.
* @param    name    Optional parameter: Filter the event list by name.
* @param    nameStartsWith    Optional parameter: Return events with names that begin with the specified string (e.g. Sp).
* @param    offset    Optional parameter: Skip the specified number of resources in the result set.
* @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "name", "startDate", "modified", "-name", "-startDate", "-modified")
* @param    series    Optional parameter: Return only events which are part of the specified series (accepts a comma-separated list of ids).
* @param    stories    Optional parameter: Return only events which contain the specified stories (accepts a comma-separated list of ids).
*/
- (void) getCharacterEventsCollectionAsyncWithCharacterId:(NSString*) characterId
                comics:(NSString*) comics
                creators:(NSString*) creators
                limit:(NSString*) limit
                modifiedSince:(NSString*) modifiedSince
                name:(NSString*) name
                nameStartsWith:(NSString*) nameStartsWith
                offset:(NSString*) offset
                orderBy:(NSString*) orderBy
                series:(NSString*) series
                stories:(NSString*) stories
                completionBlock:(CompletedGetCharacterEventsCollection) onCompleted;

/**
* Completion block definition for asynchronous call to getCharacterSeriesCollection */
typedef void (^CompletedGetCharacterSeriesCollection)(BOOL success, HttpContext* context, SeriesDataWrapper* response, NSError* error);

/**
* Fetches lists of series filtered by a character id.
* @param    characterId    Required parameter: A single character id.
* @param    comics    Optional parameter: Return only series which contain the specified comics (accepts a comma-separated list of ids).
* @param    contains    Optional parameter: Return only series containing one or more comics with the specified format. (Acceptable values are: "comic", "magazine", "trade paperback", "hardcover", "digest", "graphic novel", "digital comic", "infinite comic")
* @param    creators    Optional parameter: Return only series which feature work by the specified creators (accepts a comma-separated list of ids).
* @param    events    Optional parameter: Return only series which have comics that take place during the specified events (accepts a comma-separated list of ids).
* @param    limit    Optional parameter: Limit the result set to the specified number of resources.
* @param    modifiedSince    Optional parameter: Return only series which have been modified since the specified date.
* @param    offset    Optional parameter: Skip the specified number of resources in the result set.
* @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "title", "modified", "startYear", "-title", "-modified", "-startYear")
* @param    seriesType    Optional parameter: Filter the series by publication frequency type. (Acceptable values are: "collection", "one shot", "limited", "ongoing")
* @param    startYear    Optional parameter: Return only series matching the specified start year.
* @param    stories    Optional parameter: Return only series which contain the specified stories (accepts a comma-separated list of ids).
* @param    title    Optional parameter: Filter by series title.
* @param    titleStartsWith    Optional parameter: Return series with titles that begin with the specified string (e.g. Sp).
*/
- (void) getCharacterSeriesCollectionAsyncWithCharacterId:(NSString*) characterId
                comics:(NSString*) comics
                contains:(NSString*) contains
                creators:(NSString*) creators
                events:(NSString*) events
                limit:(NSString*) limit
                modifiedSince:(NSString*) modifiedSince
                offset:(NSString*) offset
                orderBy:(NSString*) orderBy
                seriesType:(NSString*) seriesType
                startYear:(NSString*) startYear
                stories:(NSString*) stories
                title:(NSString*) title
                titleStartsWith:(NSString*) titleStartsWith
                completionBlock:(CompletedGetCharacterSeriesCollection) onCompleted;

/**
* Completion block definition for asynchronous call to getCharacterStoryCollection */
typedef void (^CompletedGetCharacterStoryCollection)(BOOL success, HttpContext* context, StoryDataWrapper* response, NSError* error);

/**
* Fetches lists of stories filtered by a character id.
* @param    characterId    Required parameter: A single character id.
* @param    comics    Optional parameter: Return only stories contained in the specified (accepts a comma-separated list of ids).
* @param    creators    Optional parameter: Return only stories which feature work by the specified creators (accepts a comma-separated list of ids).
* @param    events    Optional parameter: Return only stories which take place during the specified events (accepts a comma-separated list of ids).
* @param    limit    Optional parameter: Limit the result set to the specified number of resources.
* @param    modifiedSince    Optional parameter: Return only stories which have been modified since the specified date.
* @param    offset    Optional parameter: Skip the specified number of resources in the result set.
* @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "id", "modified", "-id", "-modified")
* @param    series    Optional parameter: Return only stories contained the specified series (accepts a comma-separated list of ids).
*/
- (void) getCharacterStoryCollectionAsyncWithCharacterId:(NSString*) characterId
                comics:(NSString*) comics
                creators:(NSString*) creators
                events:(NSString*) events
                limit:(NSString*) limit
                modifiedSince:(NSString*) modifiedSince
                offset:(NSString*) offset
                orderBy:(NSString*) orderBy
                series:(NSString*) series
                completionBlock:(CompletedGetCharacterStoryCollection) onCompleted;

/**
* Completion block definition for asynchronous call to getCharacterCollection */
typedef void (^CompletedGetCharacterCollection)(BOOL success, HttpContext* context, CharacterDataWrapper* response, NSError* error);

/**
* Fetches lists of characters.
* @param    comics    Optional parameter: Return only characters which appear in the specified comics (accepts a comma-separated list of ids).
* @param    events    Optional parameter: Return only characters which appear in the specified events (accepts a comma-separated list of ids).
* @param    limit    Optional parameter: Limit the result set to the specified number of resources.
* @param    modifiedSince    Optional parameter: Return only characters which have been modified since the specified date.
* @param    name    Optional parameter: Return only characters matching the specified full character name (e.g. Spider-Man).
* @param    nameStartsWith    Optional parameter: Return characters with names that begin with the specified string (e.g. Sp).
* @param    offset    Optional parameter: Skip the specified number of resources in the result set.
* @param    orderBy    Optional parameter: Order the result set by a field or fields. Add a "-" to the value sort in descending order. Multiple values are given priority in the order in which they are passed. (Acceptable values are: "name", "modified", "-name", "-modified")
* @param    series    Optional parameter: Return only characters which appear the specified series (accepts a comma-separated list of ids).
* @param    stories    Optional parameter: Return only characters which appear the specified stories (accepts a comma-separated list of ids).
*/
- (void) getCharacterCollectionAsyncWithComics:(NSString*) comics
                events:(NSString*) events
                limit:(NSString*) limit
                modifiedSince:(NSString*) modifiedSince
                name:(NSString*) name
                nameStartsWith:(NSString*) nameStartsWith
                offset:(NSString*) offset
                orderBy:(NSString*) orderBy
                series:(NSString*) series
                stories:(NSString*) stories
                completionBlock:(CompletedGetCharacterCollection) onCompleted;

@end