//
//  Comic.h
//  MarvelComics
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/25/2016
//
#ifndef APIMATIC_COMIC
#define APIMATIC_COMIC

#import <Foundation/Foundation.h>
#import "JSONModel.h"
#import "APIHelper.h"

#import "CharacterList.h"
#import "ComicSummary.h"
#import "CreatorList.h"
#import "ComicDate.h"
#import "EventList.h"
#import "Image.h"
#import "ComicPrice.h"
#import "SeriesSummary.h"
#import "StoryList.h"
#import "TextObject.h"
#import "Thumbnail.h"
#import "UrlModel.h"


//protocol defined for deserialization of JSON
@protocol Comic
@end

@interface Comic : JSONModel

/**
* A resource list containing the characters which appear in this comic.
*/
@property CharacterList* characters;

/**
* A list of issues collected in this comic (will generally be empty for periodical formats such as "comic" or "magazine").
*/
@property NSArray<ComicSummary*> * collectedIssues;

/**
* A list of collections which include this comic (will generally be empty if the comic's format is a collection).
*/
@property NSArray<ComicSummary*> * collections;

/**
* A resource list containing the creators associated with this comic.
*/
@property CreatorList* creators;

/**
* A list of key dates for this comic.
*/
@property NSArray<ComicDate*> * dates;

/**
* The preferred description of the comic.
*/
@property NSString* description;

/**
* The Diamond code for the comic.
*/
@property NSString* diamondCode;

/**
* The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally.
*/
@property int digitalId;

/**
* The EAN barcode for the comic.
*/
@property NSString* ean;

/**
* A resource list containing the events in which this comic appears.
*/
@property EventList* events;

/**
* The publication format of the comic e.g. comic, hardcover, trade paperback.
*/
@property NSString* format;

/**
* The unique ID of the comic resource.
*/
@property int mid;

/**
* A list of promotional images associated with this comic.
*/
@property NSArray<Image*> * images;

/**
* The ISBN for the comic (generally only populated for collection formats).
*/
@property NSString* isbn;

/**
* The ISSN barcode for the comic.
*/
@property NSString* issn;

/**
* The number of the issue in the series (will generally be 0 for collection formats).
*/
@property int issueNumber;

/**
* The date the resource was most recently modified.
*/
@property NSDate* modified;

/**
* The number of story pages in the comic.
*/
@property int pageCount;

/**
* A list of prices for this comic.
*/
@property NSArray<ComicPrice*> * prices;

/**
* The canonical URL identifier for this resource.
*/
@property NSString* resourceURI;

/**
* A summary representation of the series to which this comic belongs.
*/
@property SeriesSummary* series;

/**
* A resource list containing the stories which appear in this comic.
*/
@property StoryList* stories;

/**
* A set of descriptive text blurbs for the comic.
*/
@property NSArray<TextObject*> * textObjects;

/**
* The representative image for this comic.
*/
@property Thumbnail* thumbnail;

/**
* The canonical title of the comic.
*/
@property NSString* title;

/**
* The UPC barcode number for the comic (generally only populated for periodical formats).
*/
@property NSString* upc;

/**
* A set of public web site URLs for the resource.
*/
@property NSArray<UrlModel*> * urls;

/**
* If the issue is a variant (e.g. an alternate cover, second printing, or directorâ€™s cut), a text description of the variant.
*/
@property NSString* variantDescription;

/**
* A list of variant issues for this comic (includes the "original" issue if the current issue is a variant).
*/
@property NSArray<ComicSummary*> * variants;


/**
* Key mappings for the json serialization and deserialization
*/
+(NSDictionary*) keyMap;

/**
* Key mapper for json serialization and deserialization
*/
+(JSONKeyMapper*) keyMapper;

/**
* Helps avoiding deserialization errors when one or more properties are missing
* @returns	True, indicating that all properties are optional for deserialization
*/
+(BOOL)propertyIsOptional:(NSString*) propertyName;

@end
#endif