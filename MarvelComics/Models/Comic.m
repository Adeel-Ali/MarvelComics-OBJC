//
//  Comic.m
//  MarvelComics
//
//  This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ) on 05/25/2016
//
#import "Comic.h"

@implementation Comic

/**
* A resource list containing the characters which appear in this comic.
*/
@synthesize characters;

/**
* A list of issues collected in this comic (will generally be empty for periodical formats such as "comic" or "magazine").
*/
@synthesize collectedIssues;

/**
* A list of collections which include this comic (will generally be empty if the comic's format is a collection).
*/
@synthesize collections;

/**
* A resource list containing the creators associated with this comic.
*/
@synthesize creators;

/**
* A list of key dates for this comic.
*/
@synthesize dates;

/**
* The preferred description of the comic.
*/
@synthesize description;

/**
* The Diamond code for the comic.
*/
@synthesize diamondCode;

/**
* The ID of the digital comic representation of this comic. Will be 0 if the comic is not available digitally.
*/
@synthesize digitalId;

/**
* The EAN barcode for the comic.
*/
@synthesize ean;

/**
* A resource list containing the events in which this comic appears.
*/
@synthesize events;

/**
* The publication format of the comic e.g. comic, hardcover, trade paperback.
*/
@synthesize format;

/**
* The unique ID of the comic resource.
*/
@synthesize mid;

/**
* A list of promotional images associated with this comic.
*/
@synthesize images;

/**
* The ISBN for the comic (generally only populated for collection formats).
*/
@synthesize isbn;

/**
* The ISSN barcode for the comic.
*/
@synthesize issn;

/**
* The number of the issue in the series (will generally be 0 for collection formats).
*/
@synthesize issueNumber;

/**
* The date the resource was most recently modified.
*/
@synthesize modified;

/**
* The number of story pages in the comic.
*/
@synthesize pageCount;

/**
* A list of prices for this comic.
*/
@synthesize prices;

/**
* The canonical URL identifier for this resource.
*/
@synthesize resourceURI;

/**
* A summary representation of the series to which this comic belongs.
*/
@synthesize series;

/**
* A resource list containing the stories which appear in this comic.
*/
@synthesize stories;

/**
* A set of descriptive text blurbs for the comic.
*/
@synthesize textObjects;

/**
* The representative image for this comic.
*/
@synthesize thumbnail;

/**
* The canonical title of the comic.
*/
@synthesize title;

/**
* The UPC barcode number for the comic (generally only populated for periodical formats).
*/
@synthesize upc;

/**
* A set of public web site URLs for the resource.
*/
@synthesize urls;

/**
* If the issue is a variant (e.g. an alternate cover, second printing, or directorâ€™s cut), a text description of the variant.
*/
@synthesize variantDescription;

/**
* A list of variant issues for this comic (includes the "original" issue if the current issue is a variant).
*/
@synthesize variants;

/**
 * For deserialization of enum ComicSummary type property from NSArray
 */
 -(void)setCollectedIssuesWithNSArray:(NSArray*) array
{
	NSError* err;
    collectedIssues = [ComicSummary arrayOfModelsFromDictionaries:array error:&err];
	if(err){
		NSLog(@"Failed to deserialise collectedIssues property");
	}
}

/**
 * For deserialization of enum ComicSummary type property from NSArray
 */
 -(void)setCollectionsWithNSArray:(NSArray*) array
{
	NSError* err;
    collections = [ComicSummary arrayOfModelsFromDictionaries:array error:&err];
	if(err){
		NSLog(@"Failed to deserialise collections property");
	}
}

/**
 * For deserialization of enum ComicDate type property from NSArray
 */
 -(void)setDatesWithNSArray:(NSArray*) array
{
	NSError* err;
    dates = [ComicDate arrayOfModelsFromDictionaries:array error:&err];
	if(err){
		NSLog(@"Failed to deserialise dates property");
	}
}

/**
 * For deserialization of enum Image type property from NSArray
 */
 -(void)setImagesWithNSArray:(NSArray*) array
{
	NSError* err;
    images = [Image arrayOfModelsFromDictionaries:array error:&err];
	if(err){
		NSLog(@"Failed to deserialise images property");
	}
}

/**
 * For deserialization of enum ComicPrice type property from NSArray
 */
 -(void)setPricesWithNSArray:(NSArray*) array
{
	NSError* err;
    prices = [ComicPrice arrayOfModelsFromDictionaries:array error:&err];
	if(err){
		NSLog(@"Failed to deserialise prices property");
	}
}

/**
 * For deserialization of enum TextObject type property from NSArray
 */
 -(void)setTextObjectsWithNSArray:(NSArray*) array
{
	NSError* err;
    textObjects = [TextObject arrayOfModelsFromDictionaries:array error:&err];
	if(err){
		NSLog(@"Failed to deserialise textObjects property");
	}
}

/**
 * For deserialization of enum UrlModel type property from NSArray
 */
 -(void)setUrlsWithNSArray:(NSArray*) array
{
	NSError* err;
    urls = [UrlModel arrayOfModelsFromDictionaries:array error:&err];
	if(err){
		NSLog(@"Failed to deserialise urls property");
	}
}

/**
 * For deserialization of enum ComicSummary type property from NSArray
 */
 -(void)setVariantsWithNSArray:(NSArray*) array
{
	NSError* err;
    variants = [ComicSummary arrayOfModelsFromDictionaries:array error:&err];
	if(err){
		NSLog(@"Failed to deserialise variants property");
	}
}


/**
* Key mappings for the json serialization and deserialization
*/
+(NSDictionary*) keyMap
{
    NSMutableDictionary* map = [[NSMutableDictionary alloc] init];
    [map addEntriesFromDictionary: @{
        @"characters": @"characters",
        @"collectedIssues": @"collectedIssues",
        @"collections": @"collections",
        @"creators": @"creators",
        @"dates": @"dates",
        @"description": @"description",
        @"diamondCode": @"diamondCode",
        @"digitalId": @"digitalId",
        @"ean": @"ean",
        @"events": @"events",
        @"format": @"format",
        @"id": @"mid",
        @"images": @"images",
        @"isbn": @"isbn",
        @"issn": @"issn",
        @"issueNumber": @"issueNumber",
        @"modified": @"modified",
        @"pageCount": @"pageCount",
        @"prices": @"prices",
        @"resourceURI": @"resourceURI",
        @"series": @"series",
        @"stories": @"stories",
        @"textObjects": @"textObjects",
        @"thumbnail": @"thumbnail",
        @"title": @"title",
        @"upc": @"upc",
        @"urls": @"urls",
        @"variantDescription": @"variantDescription",
        @"variants": @"variants"  
    }];

    return map;
}

/**
* Key mapper for json serialization and deserialization
*/
+(JSONKeyMapper*) keyMapper
{ 
  return [[JSONKeyMapper alloc] initWithDictionary: [self keyMap]];
}

/**
* Helps avoiding deserialization errors when one or more properties are missing
* @returns	True, indicating that all properties are optional for deserialization
*/
+(BOOL)propertyIsOptional:(NSString*) propertyName
{
    return YES;
}

@end